import asyncio
import random
from datetime import datetime

import requests

from config import BOT_TOKEN
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from aiogram import F, Router

router = Router()

kompl = ['–ù–µ –≥—Ä—É—Å—Ç–∏, —Å–æ–ª–Ω—ã—à–∫–æ', '–ö—Ç–æ –≥—Ä—É—Å—Ç–∏—Ç —Ç–æ—Ç —Ç—Ä–∞–Ω—Å–≤–µ—Å—Ç–∏—Ç']
veryfun = ['''–†–µ–∂–∏—Å—Å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ–º–æ–π –ø—å—è–Ω—ã–π –∏ –æ—Ä–µ—Ç:
‚Äî –¢–∞–∫ –±—ã—Å—Ç—Ä–æ —Ç–∞–∑, —è –±—É–¥—É –±–ª–µ–≤–∞—Ç—å!
–ñ–µ–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–∞–∑.
–†–µ–∂–∏—Å—Å–µ—Ä:
‚Äî –í—Å–µ —É–Ω–µ—Å–∏—Ç–µ, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –ø–æ–º–µ–Ω—è–ª–∞—Å—å —è —É–∫–∞–∫–∞–ª—Å—è.''',
           '''–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–æ–µ –¥—Ä—É–∑–µ–π:
‚Äî –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç–∞–∫–æ–π –≥—Ä—É—Å—Ç–Ω—ã–π?
–ó—É–± –±–æ–ª–∏—Ç!
‚Äî –¢–∞–∫ —Å—Ö–æ–¥–∏ –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É!
–î–∞ –±–æ—é—Å—å —è –∏—Ö!
‚Äî –ù—É, —Ç–æ–≥–¥–∞ –∏–¥–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é, –ø—Ä–∏–≤—è–∂–∏ –Ω–∏—Ç–∫—É –∫ –∑—É–±—É –∏ –∫ –ø–æ–µ–∑–¥—É.
–ü–æ–µ–∑–¥ –¥–µ—Ä–Ω–µ—Ç, –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
–ß–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–ø—è—Ç—å:
‚Äî –ù—É, –∫–∞–∫ –¥–µ–ª–∞? –ö–∞–∫ –∑—É–±?
–°–µ—Å—Ç—å —Å—Ç—É–∫ –æ—Ç–æ—Ä–≤–∞–ª!
‚Äî –®–µ—Å—Ç—å –∑—É–±–æ–≤?!
–ù–µ! –°–µ—Å—Ç—å –≤–∞–≥–æ–Ω–æ–≤! –ê —Å—É–±—ã –º–Ω–µ –≤—Å–µ –º–∞—Å—ã–Ω–∏—Å—Ç –ø–æ–≤—ã–±–∏–≤–∞–ª!''',
           '''–ù–∞–µ–∑–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫ —Ç—é—Ä—å–º—ã –Ω–∞ –Ω–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—è:
           ‚Äî –ö–∞–∫ —ç—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ —É —Ç–µ–±—è –∏–∑ –¥–µ—Å—è—Ç–æ–π –∫–∞–º–µ—Ä—ã –∑–µ–∫ —Å–±–µ–∂–∞–ª?
           –¢–æ—Ç –ø–æ—á–µ—Å—ã–≤–∞—è—Å—å –≥–æ–≤–æ—Ä–∏—Ç.
           –î–∞ —Ç–∞–∫ –≤–æ—Ç –∏ —Å–±–µ–∂–∞–ª. –î–≤–µ—Ä–∏ –æ—Ç–ø–µ—Ä.
           ‚Äî –ß–µ–º –∂–µ –æ–Ω –∏—Ö –æ—Ç–ø–µ—Ä?
           –Ø—Å–Ω–æ–µ –¥–µ–ª–æ, –∫–ª—é—á–æ–º.
           ‚Äî –ê –∫–ª—é—á —É –Ω–µ–≥–æ –æ—Ç–∫—É–¥–∞?
           –î–∞ –º–æ–π —ç—Ç–æ –∫–ª—é—á!
           ‚Äî –£–∫—Ä–∞–ª –æ–Ω –µ–≥–æ —É —Ç–µ–±—è?
           –ù–µ, –æ–Ω –Ω–µ –≤–æ—Ä! –û–Ω –µ–≥–æ —á–µ—Å—Ç–Ω–æ –≤ –∫–∞—Ä—Ç—ã –≤—ã–∏–≥—Ä–∞–ª!
           
           ''']
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
star = []
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
clava = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ')],
    [KeyboardButton(text='–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ'), KeyboardButton(text='–ú–Ω–µ –æ–æ–æ–æ–æ–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ')],
], resize_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É')
logger = logging.getLogger(__name__)
count = 0


@dp.message(Command('start'))
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ?', reply_markup=clava)


@dp.message(F.text == '–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ')
async def weather(message: Message):
    await message.answer(random.choice(kompl))


@dp.message(F.text == '–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ')
async def help(message: Message):
    await message.answer(f'–°–º–µ—Ö - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –≥—Ä—É—Å—Ç—å—é, –ª–æ–≤–∏ —à—É—Ç–µ–π–∫—É: \n {random.choice(veryfun)}')


@dp.message(F.text == '–ú–Ω–µ –æ–æ–æ–æ–æ–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ')
async def l(message: Message):
    await message.answer(f'''–°–æ–ª–Ω—ã—à–∫–æ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø—Ä—è–º –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ, —Ç–æ —è –¥—É–º–∞—é –ª—É—á—à–µ —Ç–µ–±–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
–ü–æ–∑–≤–æ–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É: 8-800-2000-122 –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–≥—É—Ç)''')


@dp.message(Command('w'))
async def tr(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    if len(command.args.split()):
        name_country = ''.join(command.args.split())
    if len(command.args.split()) > 1:
        name_country = ' '.join(command.args.split())
    smiles = {
        'Clear': '–Ø—Å–Ω–æ \U00002600',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \U00002601',
        'Rain': '–î–æ–∂–¥—å \U00002614',
        'Drizzle': '–î–æ–∂–¥—å \U00002614',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ \U000026A1',
        'Snow': '–°–Ω–µ–≥ \U0001F328',
        'Mist': '–¢—É–º–∞–Ω \U0001F32B',
    }
    try:
        re = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={name_country}&appid={name_country}&units=metric"
        )
        data = re.json()
        real_temp = round(data['main']['temp'])
        feel_temp = round(data['main']['feels_like'])
        now_time = str(datetime.now())[:19]
        country = data['sys']['country']
        sunrise = (str(datetime.fromtimestamp(data['sys']['sunrise'])))[11:]
        sunset = (str(datetime.fromtimestamp(data['sys']['sunset'])))[11:]
        wind = data['wind']['speed']
        if real_temp > 0:
            real_temp = f'+{real_temp}'
        if feel_temp > 0:
            feel_temp = f'+{feel_temp}'
        main_weather = data['weather'][0]['main']
        if main_weather in smiles:
            wsmile = smiles[main_weather]
        else:
            wsmile = '–ù–∏–ø–æ–Ω'
        await message.answer(f"***{now_time}*** \n"
                             f"–ì–æ—Ä–æ–¥:{name_country} –°—Ç—Ä–∞–Ω–∞:{country} \n"
                             f"–ü–æ–≥–æ–¥–∞: {wsmile} \n"
                             f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {real_temp}¬∞–° \n"
                             f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feel_temp}¬∞–° \n"
                             f"–í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: {sunrise} \n"
                             f"–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {sunset} \n"
                             f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c \n"
                             f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ü•∞"
                             )
    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
